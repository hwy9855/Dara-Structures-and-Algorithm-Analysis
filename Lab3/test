#include <iostream>
using namespace std;

int a[100];

void qsort (int [], int, int);

int main()
{
    int n;
    cin>>n;
    //a = new int [n];
    for (int i = 0; i < n; i++) {
        cin>>a[i];
    }
    qsort(a, 0, n - 1);
    for (int i = 0; i < n; i++) {
        cout<<a[i]<<" ";
    }
    cout<<endl;
    return 0;
}

void qsort(int a[], int l, int r) {
    if (l < r)  
    {        
        int i = l, j = r, x = a[l];  
        while (i < j)  
        {  
            while(i < j && a[j] >= x)
                j--;   
            if(i < j)  
                a[i++] = a[j];  
            while(i < j && a[i] < x)
                i++;   
            if(i < j)  
                a[j--] = a[i];  
        }  
        a[i] = x;  
        qsort(a, l, i - 1);
        qsort(a, i + 1, r);  
    }  
    return;
}


//---

#include <iostream>

#define MAX_N 100

using namespace std;

struct Heap {
    int heap[MAX_N];
    int size;

    void siftdown(int pos) {
        while (!isLeaf(pos)) {
            int j = leftchild(pos);
            int rc = rightchild(pos);
            if(rc < size && heap[rc] > heap[j]) {
                j = rc;
            }
            if(heap[pos] > heap[j]) {
                return;
            }
            swap(heap[pos], heap[j]);
            pos = j;
        }
    }

    void init() {
        size = 0;
    }

    bool isLeaf(int pos) {
        return (pos >= size/2) && (pos < size);
    }

    int leftchild(int pos) {
        return 2*pos + 1;
    }

    int rightchild(int pos) {
        return 2*pos + 2;
    }

    int parent(int pos) {
        return (pos-1)/2;
    }

    void buildHeap() {
        for (int i = size/2-1; i >= 0; i--) {
            siftdown(i);
        }
    }

    void insert(int i) {
        int curr = size++;
        heap[curr] = i;
        while (curr != 0 && heap[curr] > heap[parent(curr)]) {
            swap(heap[curr], heap[parent(curr)]);
            curr = parent(curr);
        }
    }

    int pop() {
        swap(heap[0], heap[--size]);
        if(size != 0) {
            return heap[size];
        }
    }
}a;


void heapsort(int n) {
    int tmp;
    for (int i = 0; i < n; i++) {
        cin>>tmp;
        a.insert(tmp);
    }
    a.buildHeap();
    for (int i = 0; i < n; i++) {
        cout<<a.pop();
        cout<<" ";
    }
    return;
}

int main() {
    a.init();
    int n;
    cin>>n;
    heapsort(n);
    cout<<endl;
    return 0;
}
